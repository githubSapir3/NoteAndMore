{
  "info": {
    "name": "Tasks API Tests",
    "description": "בדיקות מקיפות לכל המטודות ב-Tasks API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api/tasks",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "taskId",
      "value": "",
      "type": "string"
    },
    {
      "key": "subtaskId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Create Tasks",
      "item": [
        {
          "name": "Create Task - Success (Full)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Task created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Task created successfully');",
                  "    pm.expect(jsonData.task).to.have.property('_id');",
                  "    pm.expect(jsonData.task.title).to.eql('Complete Project Documentation');",
                  "    pm.expect(jsonData.task.priority).to.eql('high');",
                  "    pm.expect(jsonData.task.status).to.eql('pending');",
                  "});",
                  "",
                  "pm.test('Save task ID for future requests', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('taskId', jsonData.task._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete Project Documentation\",\n  \"description\": \"Write comprehensive documentation for the new task management system\",\n  \"priority\": \"high\",\n  \"status\": \"pending\",\n  \"category\": \"Development\",\n  \"dueDate\": \"2025-02-15T10:00:00Z\",\n  \"tags\": [\"documentation\", \"project\", \"urgent\"],\n  \"stickers\": [\"important\", \"review\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            }
          }
        },
        {
          "name": "Create Task - Minimal (Title Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Minimal task created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.task.title).to.eql('Simple Task');",
                  "    pm.expect(jsonData.task.status).to.eql('pending'); // default",
                  "    pm.expect(jsonData.task.priority).to.eql('medium'); // default",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Simple Task\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            }
          }
        },
        {
          "name": "Create Task - Missing Title",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for missing title', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('Validation failed');",
                  "    pm.expect(jsonData.details).to.include('Task title is required');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Task without title\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            }
          }
        },
        {
          "name": "Create Task - Invalid Priority",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for invalid priority', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('Validation failed');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Task\",\n  \"priority\": \"invalid-priority\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            }
          }
        },
        {
          "name": "Create Task - No Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Unauthorized Task\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            }
          }
        }
      ]
    },
    {
      "name": "2. Get Tasks",
      "item": [
        {
          "name": "Get All Tasks - Default",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('tasks');",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "    pm.expect(jsonData).to.have.property('filters');",
                  "    pm.expect(jsonData.tasks).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Pagination info is present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.pagination).to.have.property('currentPage');",
                  "    pm.expect(jsonData.pagination).to.have.property('totalPages');",
                  "    pm.expect(jsonData.pagination).to.have.property('totalTasks');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            }
          }
        },
        {
          "name": "Get Tasks - With Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pagination works correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.pagination.currentPage).to.eql(1);",
                  "    pm.expect(jsonData.pagination.limit).to.eql(5);",
                  "    pm.expect(jsonData.tasks.length).to.be.at.most(5);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}?page=1&limit=5",
              "host": ["{{baseUrl}}"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            }
          }
        },
        {
          "name": "Get Tasks - Filter by Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Filter applied correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.filters.status).to.eql('pending');",
                  "    if (jsonData.tasks.length > 0) {",
                  "        jsonData.tasks.forEach(task => {",
                  "            pm.expect(task.status).to.eql('pending');",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}?status=pending",
              "host": ["{{baseUrl}}"],
              "query": [
                {
                  "key": "status",
                  "value": "pending"
                }
              ]
            }
          }
        },
        {
          "name": "Get Tasks - Search",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search filter applied', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.filters.search).to.eql('documentation');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}?search=documentation",
              "host": ["{{baseUrl}}"],
              "query": [
                {
                  "key": "search",
                  "value": "documentation"
                }
              ]
            }
          }
        },
        {
          "name": "Get Tasks - Sort by Priority",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}?sortBy=priority&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "query": [
                {
                  "key": "sortBy",
                  "value": "priority"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                }
              ]
            }
          }
        },
        {
          "name": "Get Tasks - No Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            }
          }
        }
      ]
    },
    {
      "name": "3. Get Single Task",
      "item": [
        {
          "name": "Get Task by ID - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Task data structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('task');",
                  "    pm.expect(jsonData.task).to.have.property('_id');",
                  "    pm.expect(jsonData.task).to.have.property('title');",
                  "    pm.expect(jsonData.task).to.have.property('status');",
                  "    pm.expect(jsonData.task).to.have.property('priority');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["{{taskId}}"]
            }
          }
        },
        {
          "name": "Get Task by ID - Invalid ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Invalid ID error message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('Invalid task ID');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/invalid-id",
              "host": ["{{baseUrl}}"],
              "path": ["invalid-id"]
            }
          }
        },
        {
          "name": "Get Task by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Task not found error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('Task not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/507f1f77bcf86cd799439011",
              "host": ["{{baseUrl}}"],
              "path": ["507f1f77bcf86cd799439011"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Update Task",
      "item": [
        {
          "name": "Update Task - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Task updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Task updated successfully');",
                  "    pm.expect(jsonData.task.title).to.eql('Updated: Complete Project Documentation');",
                  "    pm.expect(jsonData.task.status).to.eql('in-progress');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated: Complete Project Documentation\",\n  \"status\": \"in-progress\",\n  \"description\": \"Updated description with more details\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["{{taskId}}"]
            }
          }
        },
        {
          "name": "Update Task - Partial Update",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Priority updated only', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.task.priority).to.eql('low');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"priority\": \"low\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["{{taskId}}"]
            }
          }
        },
        {
          "name": "Update Task - Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('Validation failed');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"invalid-status\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["{{taskId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "5. Task Completion",
      "item": [
        {
          "name": "Mark Task Complete - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Task marked as completed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Task marked as completed');",
                  "    pm.expect(jsonData.task.status).to.eql('completed');",
                  "    pm.expect(jsonData.task.completedAt).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/{{taskId}}/complete",
              "host": ["{{baseUrl}}"],
              "path": ["{{taskId}}", "complete"]
            }
          }
        },
        {
          "name": "Mark Task Complete - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/507f1f77bcf86cd799439011/complete",
              "host": ["{{baseUrl}}"],
              "path": ["507f1f77bcf86cd799439011", "complete"]
            }
          }
        }
      ]
    },
    {
      "name": "6. Subtasks Management",
      "item": [
        {
          "name": "Add Subtask - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Subtask added successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Subtask added successfully');",
                  "    pm.expect(jsonData.task.subtasks).to.be.an('array');",
                  "    pm.expect(jsonData.task.subtasks.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Save subtask ID for future tests",
                  "    const lastSubtask = jsonData.task.subtasks[jsonData.task.subtasks.length - 1];",
                  "    pm.collectionVariables.set('subtaskId', lastSubtask._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Review documentation structure\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/{{taskId}}/subtasks",
              "host": ["{{baseUrl}}"],
              "path": ["{{taskId}}", "subtasks"]
            }
          }
        },
        {
          "name": "Add Subtask - Missing Title",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for missing title', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('Validation failed');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Subtask without title\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/{{taskId}}/subtasks",
              "host": ["{{baseUrl}}"],
              "path": ["{{taskId}}", "subtasks"]
            }
          }
        },
        {
          "name": "Update Subtask - Mark Complete",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Subtask updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Subtask updated successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"completed\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/{{taskId}}/subtasks/{{subtaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["{{taskId}}", "subtasks", "{{subtaskId}}"]
            }
          }
        },
        {
          "name": "Update Subtask - Mark Incomplete",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"completed\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/{{taskId}}/subtasks/{{subtaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["{{taskId}}", "subtasks", "{{subtaskId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "7. Task Statistics",
      "item": [
        {
          "name": "Get Task Statistics - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Statistics structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('stats');",
                  "    pm.expect(jsonData.stats).to.have.property('total');",
                  "    pm.expect(jsonData.stats).to.have.property('completed');",
                  "    pm.expect(jsonData.stats).to.have.property('pending');",
                  "    pm.expect(jsonData.stats).to.have.property('inProgress');",
                  "    pm.expect(jsonData.stats).to.have.property('highPriority');",
                  "    pm.expect(jsonData.stats).to.have.property('overdue');",
                  "});",
                  "",
                  "pm.test('Statistics are numbers', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.stats.total).to.be.a('number');",
                  "    pm.expect(jsonData.stats.completed).to.be.a('number');",
                  "    pm.expect(jsonData.stats.pending).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/stats/summary",
              "host": ["{{baseUrl}}"],
              "path": ["stats", "summary"]
            }
          }
        },
        {
          "name": "Get Task Statistics - No Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stats/summary",
              "host": ["{{baseUrl}}"],
              "path": ["stats", "summary"]
            }
          }
        }
      ]
    },
    {
      "name": "8. Delete Task",
      "item": [
        {
          "name": "Delete Task - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Task deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Task deleted successfully');",
                  "    pm.expect(jsonData.task).to.have.property('_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["{{taskId}}"]
            }
          }
        },
        {
          "name": "Delete Task - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Task not found error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('Task not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/507f1f77bcf86cd799439011",
              "host": ["{{baseUrl}}"],
              "path": ["507f1f77bcf86cd799439011"]
            }
          }
        },
        {
          "name": "Delete Task - Invalid ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Invalid ID error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('Invalid task ID');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/invalid-id",
              "host": ["{{baseUrl}}"],
              "path": ["invalid-id"]
            }
          }
        },
        {
          "name": "Delete Task - No Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/507f1f77bcf86cd799439011",
              "host": ["{{baseUrl}}"],
              "path": ["507f1f77bcf86cd799439011"]
            }
          }
        }
      ]
    },
    {
      "name": "9. Edge Cases & Integration Tests",
      "item": [
        {
          "name": "Create Multiple Tasks for Testing",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Task for Filters\",\n  \"description\": \"This task is for testing search and filter functionality\",\n  \"priority\": \"medium\",\n  \"status\": \"in-progress\",\n  \"category\": \"Testing\",\n  \"tags\": [\"test\", \"filter\", \"search\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            }
          }
        },
        {
          "name": "Create Overdue Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Overdue Task\",\n  \"description\": \"This task is overdue for testing statistics\",\n  \"priority\": \"high\",\n  \"status\": \"pending\",\n  \"dueDate\": \"2024-12-01T10:00:00Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            }
          }
        },
        {
          "name": "Test Complex Filter Combination",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Multiple filters applied correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.filters.status).to.eql('pending');",
                  "    pm.expect(jsonData.filters.priority).to.eql('high');",
                  "    pm.expect(jsonData.filters.search).to.eql('overdue');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}?status=pending&priority=high&search=overdue&sortBy=dueDate&sortOrder=asc",
              "host": ["{{baseUrl}}"],
              "query": [
                {
                  "key": "status",
                  "value": "pending"
                },
                {
                  "key": "priority",
                  "value": "high"
                },
                {
                  "key": "search",
                  "value": "overdue"
                },
                {
                  "key": "sortBy",
                  "value": "dueDate"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                }
              ]
            }
          }
        },
        {
          "name": "Test Invalid Query Parameters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for invalid parameters', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql('Validation failed');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}?page=0&limit=200&status=invalid&priority=invalid&sortBy=invalid",
              "host": ["{{baseUrl}}"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "200"
                },
                {
                  "key": "status",
                  "value": "invalid"
                },
                {
                  "key": "priority",
                  "value": "invalid"
                },
                {
                  "key": "sortBy",
                  "value": "invalid"
                }
              ]
            }
          }
        },
        {
          "name": "Verify Statistics After Operations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Statistics reflect created tasks', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.stats.total).to.be.greaterThan(0);",
                  "    pm.expect(jsonData.stats.overdue).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/stats/summary",
              "host": ["{{baseUrl}}"],
              "path": ["stats", "summary"]
            }
          }
        }
      ]
    }
  ]
}