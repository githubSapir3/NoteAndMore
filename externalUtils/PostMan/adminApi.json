{
  "info": {
    "name": "Admin API - Full Test Coverage",
    "description": "Comprehensive test collection for Admin API endpoints including authentication, validation, and edge cases",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "eventId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{adminToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication Setup",
      "item": [
        {
          "name": "Login as Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test admin login and store token",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('token');",
                  "    pm.expect(response.user.role).to.eql('admin');",
                  "});",
                  "",
                  "// Store admin token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('adminToken', response.token);",
                  "    pm.collectionVariables.set('userId', response.user._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"adminpassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test getting all users",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has users array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('users');",
                  "    pm.expect(response.users).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Response has pagination\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('pagination');",
                  "    pm.expect(response.pagination).to.have.property('currentPage');",
                  "    pm.expect(response.pagination).to.have.property('totalPages');",
                  "});",
                  "",
                  "// Store first user ID for subsequent tests",
                  "if (pm.response.code === 200 && pm.response.json().users.length > 0) {",
                  "    pm.collectionVariables.set('userId', pm.response.json().users[0]._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Users with Filters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Filtered results are correct\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.users).to.be.an('array');",
                  "    // All users should be active",
                  "    response.users.forEach(user => {",
                  "        pm.expect(user.isActive).to.be.true;",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users?isActive=true&role=user&search=test",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"],
              "query": [
                {
                  "key": "isActive",
                  "value": "true"
                },
                {
                  "key": "role",
                  "value": "user"
                },
                {
                  "key": "search",
                  "value": "test"
                }
              ]
            }
          }
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user object\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('_id');",
                  "    pm.expect(response.user._id).to.eql(pm.collectionVariables.get('userId'));",
                  "});",
                  "",
                  "pm.test(\"User object has required fields\", function () {",
                  "    const user = pm.response.json().user;",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('firstName');",
                  "    pm.expect(user).to.have.property('lastName');",
                  "    pm.expect(user).to.have.property('role');",
                  "    pm.expect(user).to.have.property('isActive');",
                  "});",
                  "",
                  "pm.test(\"Password field is not exposed\", function () {",
                  "    const user = pm.response.json().user;",
                  "    pm.expect(user).to.not.have.property('password');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Update User Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Role updated successfully\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('updated successfully');",
                  "    pm.expect(response.user.role).to.eql('premium');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"premium\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}/role",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{userId}}", "role"]
            }
          }
        },
        {
          "name": "Update User Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Status updated successfully\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.user.isActive).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{userId}}", "status"]
            }
          }
        },
        {
          "name": "Reactivate User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User reactivated successfully\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user.isActive).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{userId}}", "status"]
            }
          }
        },
        {
          "name": "Get User Usage Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Usage statistics retrieved\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('usageStats');",
                  "    pm.expect(response.usageStats).to.have.property('usage');",
                  "    pm.expect(response.usageStats).to.have.property('limits');",
                  "    pm.expect(response.usageStats).to.have.property('canCreate');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}/usage",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{userId}}", "usage"]
            }
          }
        },
        {
          "name": "Reset User Usage",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Usage reset successfully\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('reset successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"resetType\": \"all\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}/reset-usage",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{userId}}", "reset-usage"]
            }
          }
        },
        {
          "name": "Bulk Actions - Activate Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Bulk action completed\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('action');",
                  "    pm.expect(response).to.have.property('affectedUsers');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"activate\",\n  \"userIds\": [\"{{userId}}\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users/bulk-actions",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "bulk-actions"]
            }
          }
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User deleted successfully\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('deleted successfully');",
                  "    pm.expect(response).to.have.property('userId');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{userId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Community Events Management",
      "item": [
        {
          "name": "Create Community Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Event created successfully\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('event');",
                  "    pm.expect(response.event.title).to.eql('Test Community Event');",
                  "    pm.expect(response.event.organizer).to.eql(pm.collectionVariables.get('userId'));",
                  "});",
                  "",
                  "// Store event ID for subsequent tests",
                  "if (pm.response.code === 201) {",
                  "    pm.collectionVariables.set('eventId', pm.response.json().event._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Community Event\",\n  \"description\": \"A test community event for API testing\",\n  \"date\": \"2024-12-31\",\n  \"time\": \"18:00\",\n  \"location\": \"Test Location\",\n  \"category\": \"meetup\",\n  \"maxAttendees\": 50,\n  \"tags\": [\"test\", \"api\", \"community\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "events"]
            }
          }
        },
        {
          "name": "Get All Community Events",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has events array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('events');",
                  "    pm.expect(response.events).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Events are sorted by date\", function () {",
                  "    const response = pm.response.json();",
                  "    if (response.events.length > 1) {",
                  "        const firstDate = new Date(response.events[0].date);",
                  "        const secondDate = new Date(response.events[1].date);",
                  "        pm.expect(firstDate.getTime()).to.be.at.least(secondDate.getTime());",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/events",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "events"]
            }
          }
        },
        {
          "name": "Update Community Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Event updated successfully\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.event.title).to.eql('Updated Test Event');",
                  "    pm.expect(response.event.maxAttendees).to.eql(100);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Test Event\",\n  \"maxAttendees\": 100,\n  \"tags\": [\"updated\", \"test\", \"api\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "events", "{{eventId}}"]
            }
          }
        },
        {
          "name": "Delete Community Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Event deleted successfully\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('deleted successfully');",
                  "    pm.expect(response).to.have.property('eventId');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "events", "{{eventId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Dashboard & Statistics",
      "item": [
        {
          "name": "Get Admin Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has stats object\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('stats');",
                  "    pm.expect(response.stats).to.have.property('users');",
                  "    pm.expect(response.stats).to.have.property('events');",
                  "    pm.expect(response.stats).to.have.property('system');",
                  "});",
                  "",
                  "pm.test(\"User statistics are numbers\", function () {",
                  "    const response = pm.response.json();",
                  "    const users = response.stats.users;",
                  "    pm.expect(users.total).to.be.a('number');",
                  "    pm.expect(users.active).to.be.a('number');",
                  "    pm.expect(users.premium).to.be.a('number');",
                  "    pm.expect(users.admin).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/stats",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "stats"]
            }
          }
        },
        {
          "name": "Get Admin Dashboard",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has dashboard object\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('dashboard');",
                  "    pm.expect(response.dashboard).to.have.property('users');",
                  "    pm.expect(response.dashboard).to.have.property('events');",
                  "    pm.expect(response.dashboard).to.have.property('system');",
                  "});",
                  "",
                  "pm.test(\"System info is present\", function () {",
                  "    const response = pm.response.json();",
                  "    const system = response.dashboard.system;",
                  "    pm.expect(system).to.have.property('uptime');",
                  "    pm.expect(system).to.have.property('nodeVersion');",
                  "    pm.expect(system).to.have.property('timestamp');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "dashboard"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Handling & Validation",
      "item": [
        {
          "name": "Invalid Role Update",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation error message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.include('Validation failed');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"invalid_role\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}/role",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{userId}}", "role"]
            }
          }
        },
        {
          "name": "Invalid Event Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation error for missing title\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.include('Validation failed');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Event without title\",\n  \"date\": \"2024-12-31\",\n  \"time\": \"18:00\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "events"]
            }
          }
        },
        {
          "name": "Non-existent User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"User not found error\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.include('User not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users/507f1f77bcf86cd799439011",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "507f1f77bcf86cd799439011"]
            }
          }
        },
        {
          "name": "Self-Role Change Prevention",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Cannot change own role error\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.include('Cannot change own role');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}/role",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{userId}}", "role"]
            }
          }
        }
      ]
    },
    {
      "name": "Authentication & Authorization",
      "item": [
        {
          "name": "Access Without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Unauthorized error message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.include('Unauthorized');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            }
          },
          "auth": {
            "type": "noauth"
          }
        },
        {
          "name": "Access with Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Invalid token error\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.include('Invalid token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            }
          }
        }
      ]
    }
  ]
}
